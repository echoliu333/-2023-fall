int cols, rows;
int cellSize = 10;
boolean[][] grid;
boolean[][] nextGrid;

void setup() {
  size(800, 600);
  cols = width / cellSize;
  rows = height / cellSize;
  grid = new boolean[cols][rows];
  nextGrid = new boolean[cols][rows];
  // 随机初始化
  for (int i = 0; i < cols; i++) {
    for (int j = 0; j < rows; j++) {
      grid[i][j] = random(1) < 0.5;
    }
  }
}

void draw() {
  background(255);
  for (int i = 0; i < cols; i++) {
    for (int j = 0; j < rows; j++) {
      if (grid[i][j]) {
        fill(0);
        stroke(0);
      } else {
        fill(255);
        stroke(0);
      }
      rect(i * cellSize, j * cellSize, cellSize, cellSize);
    }
  }
  updateGrid();
}

void updateGrid() {
  for (int i = 0; i < cols; i++) {
    for (int j = 0; j < rows; j++) {
      int neighbors = countNeighbors(i, j);
      if (grid[i][j]) {
        if (neighbors < 2 || neighbors > 3) {
          nextGrid[i][j] = false;
        } else {
          nextGrid[i][j] = true;
        }
      } else {
        if (neighbors == 3) {
          nextGrid[i][j] = true;
        } else {
          nextGrid[i][j] = false;
        }
      }
    }
  }
  // 更新网格
  for (int i = 0; i < cols; i++) {
    arraycopy(nextGrid[i], 0, grid[i], 0, rows);
  }
}

int countNeighbors(int x, int y) {
  int count = 0;
  for (int i = -1; i <= 1; i++) {
    for (int j = -1; j <= 1; j++) {
      int col = (x + i + cols) % cols;
      int row = (y + j + rows) % rows;
      if (grid[col][row]) {
        count++;
      }
    }
  }
  if (grid[x][y]) {
    count--;
  }
  return count;
}
